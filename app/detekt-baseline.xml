<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>CommentSpacing:BLEException.kt$BLEConnectionClosing$/// Our interface is being shut down</ID>
    <ID>CommentSpacing:Constants.kt$/// a bool true means we expect this condition to continue until, false means device might come back</ID>
    <ID>CommentSpacing:Coroutines.kt$/// Wrap launch with an exception handler, FIXME, move into a utility lib</ID>
    <ID>CommentWrapping:SignalMetrics.kt$Metric.SNR$/* Selected 12 as the max to get 4 equal vertical sections. */</ID>
    <ID>ComposableParamOrder:Channel.kt$ChannelScreen</ID>
    <ID>ComposableParamOrder:Channel.kt$EditChannelUrl</ID>
    <ID>ComposableParamOrder:DeviceMetrics.kt$DeviceMetricsChart</ID>
    <ID>ComposableParamOrder:EmptyStateContent.kt$EmptyStateContent</ID>
    <ID>ComposableParamOrder:EnvironmentCharts.kt$ChartContent</ID>
    <ID>ComposableParamOrder:EnvironmentCharts.kt$EnvironmentMetricsChart</ID>
    <ID>ComposableParamOrder:EnvironmentCharts.kt$MetricPlottingCanvas</ID>
    <ID>ComposableParamOrder:HostMetricsLog.kt$HostMetricsItem</ID>
    <ID>ComposableParamOrder:HostMetricsLog.kt$LogLine</ID>
    <ID>ComposableParamOrder:Message.kt$MessageScreen</ID>
    <ID>ComposableParamOrder:Message.kt$QuickChatRow</ID>
    <ID>ComposableParamOrder:MessageActions.kt$MessageActions</ID>
    <ID>ComposableParamOrder:MessageActions.kt$MessageStatusButton</ID>
    <ID>ComposableParamOrder:MessageItem.kt$MessageItem</ID>
    <ID>ComposableParamOrder:MessageList.kt$DeliveryInfo</ID>
    <ID>ComposableParamOrder:MessageList.kt$MessageList</ID>
    <ID>ComposableParamOrder:PaxMetrics.kt$PaxMetricsChart</ID>
    <ID>ComposableParamOrder:PowerMetrics.kt$PowerMetricsChart</ID>
    <ID>ComposableParamOrder:QuickChat.kt$OutlinedTextFieldWithCounter</ID>
    <ID>ComposableParamOrder:Share.kt$ShareScreen</ID>
    <ID>ComposableParamOrder:SignalMetrics.kt$SignalMetricsChart</ID>
    <ID>ComposableParamOrder:TopLevelNavIcon.kt$ConnectionsNavIcon</ID>
    <ID>CyclomaticComplexMethod:MeshService.kt$MeshService$private fun handleReceivedData(packet: MeshPacket)</ID>
    <ID>EmptyClassBlock:DebugLogFile.kt$BinaryLogFile${ }</ID>
    <ID>EmptyFunctionBlock:NopInterface.kt$NopInterface${ }</ID>
    <ID>EmptyFunctionBlock:NsdManager.kt$&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:TrustAllX509TrustManager.kt$TrustAllX509TrustManager${}</ID>
    <ID>FinalNewline:BLEException.kt$com.geeksville.mesh.service.BLEException.kt</ID>
    <ID>FinalNewline:BluetoothInterfaceFactory.kt$com.geeksville.mesh.repository.radio.BluetoothInterfaceFactory.kt</ID>
    <ID>FinalNewline:BluetoothRepositoryModule.kt$com.geeksville.mesh.repository.bluetooth.BluetoothRepositoryModule.kt</ID>
    <ID>FinalNewline:CoroutineDispatchers.kt$com.geeksville.mesh.CoroutineDispatchers.kt</ID>
    <ID>FinalNewline:Coroutines.kt$com.geeksville.mesh.concurrent.Coroutines.kt</ID>
    <ID>FinalNewline:DateUtils.kt$com.geeksville.mesh.android.DateUtils.kt</ID>
    <ID>FinalNewline:DebugLogFile.kt$com.geeksville.mesh.android.DebugLogFile.kt</ID>
    <ID>FinalNewline:InterfaceId.kt$com.geeksville.mesh.repository.radio.InterfaceId.kt</ID>
    <ID>FinalNewline:InterfaceSpec.kt$com.geeksville.mesh.repository.radio.InterfaceSpec.kt</ID>
    <ID>FinalNewline:MockInterfaceFactory.kt$com.geeksville.mesh.repository.radio.MockInterfaceFactory.kt</ID>
    <ID>FinalNewline:NopInterface.kt$com.geeksville.mesh.repository.radio.NopInterface.kt</ID>
    <ID>FinalNewline:NopInterfaceFactory.kt$com.geeksville.mesh.repository.radio.NopInterfaceFactory.kt</ID>
    <ID>FinalNewline:ProbeTableProvider.kt$com.geeksville.mesh.repository.usb.ProbeTableProvider.kt</ID>
    <ID>FinalNewline:RadioNotConnectedException.kt$com.geeksville.mesh.service.RadioNotConnectedException.kt</ID>
    <ID>FinalNewline:SerialConnection.kt$com.geeksville.mesh.repository.usb.SerialConnection.kt</ID>
    <ID>FinalNewline:SerialConnectionListener.kt$com.geeksville.mesh.repository.usb.SerialConnectionListener.kt</ID>
    <ID>FinalNewline:SerialInterfaceFactory.kt$com.geeksville.mesh.repository.radio.SerialInterfaceFactory.kt</ID>
    <ID>FinalNewline:TCPInterfaceFactory.kt$com.geeksville.mesh.repository.radio.TCPInterfaceFactory.kt</ID>
    <ID>FinalNewline:UsbRepositoryModule.kt$com.geeksville.mesh.repository.usb.UsbRepositoryModule.kt</ID>
    <ID>ForbiddenComment:SafeBluetooth.kt$SafeBluetooth$// TODO: display some kind of UI about restarting BLE</ID>
    <ID>LambdaParameterEventTrailing:Channel.kt$onConfirm</ID>
    <ID>LambdaParameterEventTrailing:ContactSharing.kt$onSharedContactRequested</ID>
    <ID>LambdaParameterEventTrailing:Message.kt$onClick</ID>
    <ID>LambdaParameterEventTrailing:Message.kt$onSendMessage</ID>
    <ID>LambdaParameterEventTrailing:MessageList.kt$onReply</ID>
    <ID>LambdaParameterEventTrailing:QuickChat.kt$onNavigateUp</ID>
    <ID>LambdaParameterEventTrailing:TracerouteLog.kt$onNavigateUp</ID>
    <ID>LambdaParameterInRestartableEffect:Channel.kt$onConfirm</ID>
    <ID>LambdaParameterInRestartableEffect:MessageList.kt$onUnreadChanged</ID>
    <ID>LargeClass:MeshService.kt$MeshService : Service</ID>
    <ID>LongMethod:EnvironmentMetrics.kt$@Composable fun EnvironmentMetricsScreen(viewModel: MetricsViewModel = hiltViewModel(), onNavigateUp: () -&gt; Unit)</ID>
    <ID>LongMethod:MeshService.kt$MeshService$private fun handleReceivedData(packet: MeshPacket)</ID>
    <ID>LongParameterList:MessageViewModel.kt$MessageViewModel$( private val nodeRepository: NodeRepository, radioConfigRepository: RadioConfigRepository, quickChatActionRepository: QuickChatActionRepository, private val serviceRepository: ServiceRepository, private val packetRepository: PacketRepository, private val uiPrefs: UiPrefs, private val meshServiceNotifications: MeshServiceNotifications, )</ID>
    <ID>MagicNumber:BluetoothInterface.kt$BluetoothInterface$1000</ID>
    <ID>MagicNumber:BluetoothInterface.kt$BluetoothInterface$500</ID>
    <ID>MagicNumber:BluetoothInterface.kt$BluetoothInterface$512</ID>
    <ID>MagicNumber:Contacts.kt$7</ID>
    <ID>MagicNumber:Contacts.kt$8</ID>
    <ID>MagicNumber:MQTTRepository.kt$MQTTRepository$512</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$0xffffffff</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$1000</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$1000.0</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$1000L</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$16</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$30</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$32</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$60000</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$8</ID>
    <ID>MagicNumber:MetricsViewModel.kt$MetricsViewModel$1000L</ID>
    <ID>MagicNumber:MetricsViewModel.kt$MetricsViewModel$1e-5</ID>
    <ID>MagicNumber:MetricsViewModel.kt$MetricsViewModel$1e-7</ID>
    <ID>MagicNumber:ProbeTableProvider.kt$ProbeTableProvider$21972</ID>
    <ID>MagicNumber:ProbeTableProvider.kt$ProbeTableProvider$32809</ID>
    <ID>MagicNumber:ProbeTableProvider.kt$ProbeTableProvider$6790</ID>
    <ID>MagicNumber:ProbeTableProvider.kt$ProbeTableProvider$9114</ID>
    <ID>MagicNumber:SafeBluetooth.kt$SafeBluetooth$10</ID>
    <ID>MagicNumber:SafeBluetooth.kt$SafeBluetooth$100</ID>
    <ID>MagicNumber:SafeBluetooth.kt$SafeBluetooth$1000</ID>
    <ID>MagicNumber:SafeBluetooth.kt$SafeBluetooth$2500</ID>
    <ID>MagicNumber:SafeBluetooth.kt$SafeBluetooth.&lt;no name provided&gt;$2500</ID>
    <ID>MagicNumber:SerialConnectionImpl.kt$SerialConnectionImpl$115200</ID>
    <ID>MagicNumber:SerialConnectionImpl.kt$SerialConnectionImpl$200</ID>
    <ID>MagicNumber:ServiceClient.kt$ServiceClient$500</ID>
    <ID>MagicNumber:StreamInterface.kt$StreamInterface$0xff</ID>
    <ID>MagicNumber:StreamInterface.kt$StreamInterface$3</ID>
    <ID>MagicNumber:StreamInterface.kt$StreamInterface$4</ID>
    <ID>MagicNumber:StreamInterface.kt$StreamInterface$8</ID>
    <ID>MagicNumber:TCPInterface.kt$TCPInterface$1000</ID>
    <ID>MagicNumber:TCPInterface.kt$TCPInterface$180</ID>
    <ID>MagicNumber:TCPInterface.kt$TCPInterface$500</ID>
    <ID>MagicNumber:UIState.kt$4</ID>
    <ID>MatchingDeclarationName:MeshServiceStarter.kt$ServiceStarter : Worker</ID>
    <ID>MaxLineLength:BluetoothInterface.kt$/* Info for the esp32 device side code. See that source for the 'gold' standard docs on this interface. MeshBluetoothService UUID 6ba1b218-15a8-461f-9fa8-5dcae273eafd FIXME - notify vs indication for fromradio output. Using notify for now, not sure if that is best FIXME - in the esp32 mesh management code, occasionally mirror the current net db to flash, so that if we reboot we still have a good guess of users who are out there. FIXME - make sure this protocol is guaranteed robust and won't drop packets "According to the BLE specification the notification length can be max ATT_MTU - 3. The 3 bytes subtracted is the 3-byte header(OP-code (operation, 1 byte) and the attribute handle (2 bytes)). In BLE 4.1 the ATT_MTU is 23 bytes (20 bytes for payload), but in BLE 4.2 the ATT_MTU can be negotiated up to 247 bytes." MAXPACKET is 256? look into what the lora lib uses. FIXME Characteristics: UUID properties description 8ba2bcc2-ee02-4a55-a531-c525c5e454d5 read fromradio - contains a newly received packet destined towards the phone (up to MAXPACKET bytes? per packet). After reading the esp32 will put the next packet in this mailbox. If the FIFO is empty it will put an empty packet in this mailbox. f75c76d2-129e-4dad-a1dd-7866124401e7 write toradio - write ToRadio protobufs to this charstic to send them (up to MAXPACKET len) ed9da18c-a800-4f66-a670-aa7547e34453 read|notify|write fromnum - the current packet # in the message waiting inside fromradio, if the phone sees this notify it should read messages until it catches up with this number. The phone can write to this register to go backwards up to FIXME packets, to handle the rare case of a fromradio packet was dropped after the esp32 callback was called, but before it arrives at the phone. If the phone writes to this register the esp32 will discard older packets and put the next packet &gt;= fromnum in fromradio. When the esp32 advances fromnum, it will delay doing the notify by 100ms, in the hopes that the notify will never actally need to be sent if the phone is already pulling from fromradio. Note: that if the phone ever sees this number decrease, it means the esp32 has rebooted. Re: queue management Not all messages are kept in the fromradio queue (filtered based on SubPacket): * only the most recent Position and User messages for a particular node are kept * all Data SubPackets are kept * No WantNodeNum / DenyNodeNum messages are kept A variable keepAllPackets, if set to true will suppress this behavior and instead keep everything for forwarding to the phone (for debugging) */</ID>
    <ID>ModifierClickableOrder:Channel.kt$clickable(onClick = onClick)</ID>
    <ID>ModifierMissing:BLEDevices.kt$BLEDevices</ID>
    <ID>ModifierMissing:Channel.kt$ChannelScreen</ID>
    <ID>ModifierMissing:CommonCharts.kt$ChartHeader</ID>
    <ID>ModifierMissing:CommonCharts.kt$Legend</ID>
    <ID>ModifierMissing:CommonCharts.kt$TimeLabels</ID>
    <ID>ModifierMissing:ContactSharing.kt$SharedContactDialog</ID>
    <ID>ModifierMissing:Contacts.kt$ContactListView</ID>
    <ID>ModifierMissing:Contacts.kt$ContactsScreen</ID>
    <ID>ModifierMissing:Contacts.kt$SelectionToolbar</ID>
    <ID>ModifierMissing:DeviceMetrics.kt$DeviceMetricsScreen</ID>
    <ID>ModifierMissing:EmptyStateContent.kt$EmptyStateContent</ID>
    <ID>ModifierMissing:EnvironmentMetrics.kt$EnvironmentMetricsScreen</ID>
    <ID>ModifierMissing:HostMetricsLog.kt$HostMetricsLogScreen</ID>
    <ID>ModifierMissing:Main.kt$MainScreen</ID>
    <ID>ModifierMissing:MessageActions.kt$MessageStatusButton</ID>
    <ID>ModifierMissing:MessageActions.kt$ReactionButton</ID>
    <ID>ModifierMissing:MessageActions.kt$ReplyButton</ID>
    <ID>ModifierMissing:NetworkDevices.kt$NetworkDevices</ID>
    <ID>ModifierMissing:NodeListScreen.kt$NodeListScreen</ID>
    <ID>ModifierMissing:PaxMetrics.kt$PaxMetricsItem</ID>
    <ID>ModifierMissing:PaxMetrics.kt$PaxMetricsScreen</ID>
    <ID>ModifierMissing:PositionLog.kt$PositionItem</ID>
    <ID>ModifierMissing:PositionLog.kt$PositionLogScreen</ID>
    <ID>ModifierMissing:PowerMetrics.kt$PowerMetricsScreen</ID>
    <ID>ModifierMissing:Reaction.kt$ReactionDialog</ID>
    <ID>ModifierMissing:Share.kt$ShareScreen</ID>
    <ID>ModifierMissing:SharedContactDialog.kt$SharedContactDialog</ID>
    <ID>ModifierMissing:SignalMetrics.kt$SignalMetricsScreen</ID>
    <ID>ModifierMissing:TopLevelNavIcon.kt$TopLevelNavIcon</ID>
    <ID>ModifierNotUsedAtRoot:DeviceMetrics.kt$modifier = modifier.weight(weight = Y_AXIS_WEIGHT)</ID>
    <ID>ModifierNotUsedAtRoot:DeviceMetrics.kt$modifier = modifier.width(dp)</ID>
    <ID>ModifierNotUsedAtRoot:DeviceMetrics.kt$modifier.width(dp)</ID>
    <ID>ModifierNotUsedAtRoot:EnvironmentCharts.kt$modifier = modifier.width(dp)</ID>
    <ID>ModifierNotUsedAtRoot:EnvironmentCharts.kt$modifier.width(dp)</ID>
    <ID>ModifierNotUsedAtRoot:PaxMetrics.kt$modifier.width(dp)</ID>
    <ID>ModifierNotUsedAtRoot:PowerMetrics.kt$modifier = modifier.weight(weight = Y_AXIS_WEIGHT)</ID>
    <ID>ModifierNotUsedAtRoot:PowerMetrics.kt$modifier = modifier.width(dp)</ID>
    <ID>ModifierNotUsedAtRoot:PowerMetrics.kt$modifier.width(dp)</ID>
    <ID>ModifierNotUsedAtRoot:QuickChat.kt$modifier = modifier.fillMaxSize().padding(innerPadding)</ID>
    <ID>ModifierNotUsedAtRoot:SignalMetrics.kt$modifier = modifier.weight(weight = Y_AXIS_WEIGHT)</ID>
    <ID>ModifierNotUsedAtRoot:SignalMetrics.kt$modifier = modifier.width(dp)</ID>
    <ID>ModifierNotUsedAtRoot:SignalMetrics.kt$modifier.width(dp)</ID>
    <ID>ModifierNotUsedAtRoot:TracerouteLog.kt$modifier = modifier.fillMaxSize().padding(innerPadding)</ID>
    <ID>ModifierReused:DeviceMetrics.kt$Canvas(modifier = modifier.width(dp)) { val height = size.height val width = size.width for (i in telemetries.indices) { val telemetry = telemetries[i] /* x-value time */ val xRatio = (telemetry.time - oldest.time).toFloat() / timeDiff val x = xRatio * width /* Channel Utilization */ plotPoint( drawContext = drawContext, color = Device.CH_UTIL.color, x = x, value = telemetry.deviceMetrics.channelUtilization, divisor = MAX_PERCENT_VALUE, ) /* Air Utilization Transmit */ plotPoint( drawContext = drawContext, color = Device.AIR_UTIL.color, x = x, value = telemetry.deviceMetrics.airUtilTx, divisor = MAX_PERCENT_VALUE, ) } /* Battery Line */ var index = 0 while (index &lt; telemetries.size) { val path = Path() index = createPath( telemetries = telemetries, index = index, path = path, oldestTime = oldest.time, timeRange = timeDiff, width = width, timeThreshold = selectedTime.timeThreshold(), ) { i -&gt; val telemetry = telemetries.getOrNull(i) ?: telemetries.last() val ratio = telemetry.deviceMetrics.batteryLevel / MAX_PERCENT_VALUE val y = height - (ratio * height) return@createPath y } drawPath( path = path, color = Device.BATTERY.color, style = Stroke(width = GraphUtil.RADIUS, cap = StrokeCap.Round), ) } }</ID>
    <ID>ModifierReused:DeviceMetrics.kt$HorizontalLinesOverlay( modifier.width(dp), lineColors = listOf(graphColor, Color.Yellow, Color.Red, graphColor, graphColor), )</ID>
    <ID>ModifierReused:DeviceMetrics.kt$TimeAxisOverlay(modifier.width(dp), oldest = oldest.time, newest = newest.time, selectedTime.lineInterval())</ID>
    <ID>ModifierReused:EnvironmentCharts.kt$Box( contentAlignment = Alignment.TopStart, modifier = modifier.horizontalScroll(state = scrollState, reverseScrolling = true), ) { HorizontalLinesOverlay(modifier.width(dp), lineColors = List(size = 5) { graphColor }) TimeAxisOverlay(modifier = modifier.width(dp), oldest = oldest, newest = newest, selectedTime.lineInterval()) MetricPlottingCanvas( modifier = modifier.width(dp), telemetries = telemetries, graphData = graphData, selectedTime = selectedTime, oldest = oldest, timeDiff = timeDiff, rightMin = rightMin, rightMax = rightMax, ) }</ID>
    <ID>ModifierReused:EnvironmentCharts.kt$HorizontalLinesOverlay(modifier.width(dp), lineColors = List(size = 5) { graphColor })</ID>
    <ID>ModifierReused:EnvironmentCharts.kt$MetricPlottingCanvas( modifier = modifier.width(dp), telemetries = telemetries, graphData = graphData, selectedTime = selectedTime, oldest = oldest, timeDiff = timeDiff, rightMin = rightMin, rightMax = rightMax, )</ID>
    <ID>ModifierReused:EnvironmentCharts.kt$TimeAxisOverlay(modifier = modifier.width(dp), oldest = oldest, newest = newest, selectedTime.lineInterval())</ID>
    <ID>ModifierReused:PaxMetrics.kt$HorizontalLinesOverlay(modifier.width(dp), lineColors = List(size = 5) { Color.LightGray })</ID>
    <ID>ModifierReused:PaxMetrics.kt$Row(modifier = modifier.fillMaxWidth().fillMaxHeight(fraction = 0.33f)) { YAxisLabels( modifier = Modifier.weight(Y_AXIS_WEIGHT).fillMaxHeight().padding(start = 8.dp), labelColor = MaterialTheme.colorScheme.onSurface, minValue = minValue, maxValue = maxValue, ) Box( contentAlignment = Alignment.TopStart, modifier = Modifier.horizontalScroll(state = scrollState, reverseScrolling = true).weight(CHART_WEIGHT), ) { HorizontalLinesOverlay(modifier.width(dp), lineColors = List(size = 5) { Color.LightGray }) TimeAxisOverlay(modifier.width(dp), oldest = minTime, newest = maxTime, timeFrame.lineInterval()) Canvas(modifier = Modifier.width(dp).fillMaxHeight()) { val width = size.width val height = size.height fun xForTime(t: Int): Float = if (maxTime == minTime) width / 2 else (t - minTime).toFloat() / (maxTime - minTime) * width fun yForValue(v: Int): Float = height - (v - minValue) / (maxValue - minValue) * height fun drawLine(series: List&lt;Pair&lt;Int, Int&gt;&gt;, color: Color) { for (i in 1 until series.size) { drawLine( color = color, start = Offset(xForTime(series[i - 1].first), yForValue(series[i - 1].second)), end = Offset(xForTime(series[i].first), yForValue(series[i].second)), strokeWidth = 2.dp.toPx(), ) } } drawLine(bleSeries, PaxSeries.BLE.color) drawLine(wifiSeries, PaxSeries.WIFI.color) drawLine(totalSeries, PaxSeries.PAX.color) } } YAxisLabels( modifier = Modifier.weight(Y_AXIS_WEIGHT).fillMaxHeight().padding(end = 8.dp), labelColor = MaterialTheme.colorScheme.onSurface, minValue = minValue, maxValue = maxValue, ) }</ID>
    <ID>ModifierReused:PaxMetrics.kt$TimeAxisOverlay(modifier.width(dp), oldest = minTime, newest = maxTime, timeFrame.lineInterval())</ID>
    <ID>ModifierReused:PowerMetrics.kt$Canvas(modifier = modifier.width(dp)) { val width = size.width val height = size.height /* Voltage */ var index = 0 while (index &lt; telemetries.size) { val path = Path() index = createPath( telemetries = telemetries, index = index, path = path, oldestTime = oldest.time, timeRange = timeDiff, width = width, timeThreshold = selectedTime.timeThreshold(), ) { i -&gt; val telemetry = telemetries.getOrNull(i) ?: telemetries.last() val ratio = (retrieveVoltage(selectedChannel, telemetry) - voltageMin) / voltageDiff val y = height - (ratio * height) return@createPath y } drawPath( path = path, color = VOLTAGE_COLOR, style = Stroke(width = GraphUtil.RADIUS, cap = StrokeCap.Round), ) } /* Current */ index = 0 while (index &lt; telemetries.size) { val path = Path() index = createPath( telemetries = telemetries, index = index, path = path, oldestTime = oldest.time, timeRange = timeDiff, width = width, timeThreshold = selectedTime.timeThreshold(), ) { i -&gt; val telemetry = telemetries.getOrNull(i) ?: telemetries.last() val ratio = (retrieveCurrent(selectedChannel, telemetry) - Power.CURRENT.min) / currentDiff val y = height - (ratio * height) return@createPath y } drawPath( path = path, color = Power.CURRENT.color, style = Stroke(width = GraphUtil.RADIUS, cap = StrokeCap.Round), ) } }</ID>
    <ID>ModifierReused:PowerMetrics.kt$HorizontalLinesOverlay(modifier.width(dp), lineColors = List(size = 5) { graphColor })</ID>
    <ID>ModifierReused:PowerMetrics.kt$TimeAxisOverlay(modifier.width(dp), oldest = oldest.time, newest = newest.time, selectedTime.lineInterval())</ID>
    <ID>ModifierReused:PowerMetrics.kt$YAxisLabels( modifier = modifier.weight(weight = Y_AXIS_WEIGHT), Power.CURRENT.color, minValue = Power.CURRENT.min, maxValue = Power.CURRENT.max, )</ID>
    <ID>ModifierReused:PowerMetrics.kt$YAxisLabels( modifier = modifier.weight(weight = Y_AXIS_WEIGHT), VOLTAGE_COLOR, minValue = voltageMin, maxValue = voltageMax, )</ID>
    <ID>ModifierReused:SignalMetrics.kt$Canvas(modifier = modifier.width(dp)) { val width = size.width /* Plot */ for (packet in meshPackets) { val xRatio = (packet.rxTime - oldest.rxTime).toFloat() / timeDiff val x = xRatio * width /* SNR */ plotPoint( drawContext = drawContext, color = Metric.SNR.color, x = x, value = packet.rxSnr - Metric.SNR.min, divisor = snrDiff, ) /* RSSI */ plotPoint( drawContext = drawContext, color = Metric.RSSI.color, x = x, value = packet.rxRssi - Metric.RSSI.min, divisor = rssiDiff, ) } }</ID>
    <ID>ModifierReused:SignalMetrics.kt$HorizontalLinesOverlay(modifier.width(dp), lineColors = List(size = 5) { graphColor })</ID>
    <ID>ModifierReused:SignalMetrics.kt$TimeAxisOverlay( modifier.width(dp), oldest = oldest.rxTime, newest = newest.rxTime, selectedTime.lineInterval(), )</ID>
    <ID>ModifierReused:SignalMetrics.kt$YAxisLabels( modifier = modifier.weight(weight = Y_AXIS_WEIGHT), Metric.RSSI.color, minValue = Metric.RSSI.min, maxValue = Metric.RSSI.max, )</ID>
    <ID>ModifierReused:SignalMetrics.kt$YAxisLabels( modifier = modifier.weight(weight = Y_AXIS_WEIGHT), Metric.SNR.color, minValue = Metric.SNR.min, maxValue = Metric.SNR.max, )</ID>
    <ID>ModifierWithoutDefault:CommonCharts.kt$modifier</ID>
    <ID>ModifierWithoutDefault:EnvironmentCharts.kt$modifier</ID>
    <ID>MultipleEmitters:CommonCharts.kt$LegendLabel</ID>
    <ID>MultipleEmitters:DeviceMetrics.kt$DeviceMetricsChart</ID>
    <ID>MultipleEmitters:EnvironmentCharts.kt$EnvironmentMetricsChart</ID>
    <ID>MultipleEmitters:PaxMetrics.kt$PaxMetricsChart</ID>
    <ID>MultipleEmitters:PowerMetrics.kt$PowerMetricsChart</ID>
    <ID>MultipleEmitters:SignalMetrics.kt$SignalMetricsChart</ID>
    <ID>MutableStateAutoboxing:Contacts.kt$mutableStateOf(2)</ID>
    <ID>MutableStateParam:MessageList.kt$selectedIds</ID>
    <ID>NestedBlockDepth:MeshService.kt$MeshService$private fun handleReceivedAdmin(fromNodeNum: Int, a: AdminProtos.AdminMessage)</ID>
    <ID>NestedBlockDepth:MeshService.kt$MeshService$private fun handleReceivedData(packet: MeshPacket)</ID>
    <ID>NewLineAtEndOfFile:BLEException.kt$com.geeksville.mesh.service.BLEException.kt</ID>
    <ID>NewLineAtEndOfFile:BluetoothInterfaceFactory.kt$com.geeksville.mesh.repository.radio.BluetoothInterfaceFactory.kt</ID>
    <ID>NewLineAtEndOfFile:BluetoothRepositoryModule.kt$com.geeksville.mesh.repository.bluetooth.BluetoothRepositoryModule.kt</ID>
    <ID>NewLineAtEndOfFile:CoroutineDispatchers.kt$com.geeksville.mesh.CoroutineDispatchers.kt</ID>
    <ID>NewLineAtEndOfFile:Coroutines.kt$com.geeksville.mesh.concurrent.Coroutines.kt</ID>
    <ID>NewLineAtEndOfFile:DateUtils.kt$com.geeksville.mesh.android.DateUtils.kt</ID>
    <ID>NewLineAtEndOfFile:DebugLogFile.kt$com.geeksville.mesh.android.DebugLogFile.kt</ID>
    <ID>NewLineAtEndOfFile:InterfaceId.kt$com.geeksville.mesh.repository.radio.InterfaceId.kt</ID>
    <ID>NewLineAtEndOfFile:InterfaceSpec.kt$com.geeksville.mesh.repository.radio.InterfaceSpec.kt</ID>
    <ID>NewLineAtEndOfFile:MockInterfaceFactory.kt$com.geeksville.mesh.repository.radio.MockInterfaceFactory.kt</ID>
    <ID>NewLineAtEndOfFile:NopInterface.kt$com.geeksville.mesh.repository.radio.NopInterface.kt</ID>
    <ID>NewLineAtEndOfFile:NopInterfaceFactory.kt$com.geeksville.mesh.repository.radio.NopInterfaceFactory.kt</ID>
    <ID>NewLineAtEndOfFile:ProbeTableProvider.kt$com.geeksville.mesh.repository.usb.ProbeTableProvider.kt</ID>
    <ID>NewLineAtEndOfFile:RadioNotConnectedException.kt$com.geeksville.mesh.service.RadioNotConnectedException.kt</ID>
    <ID>NewLineAtEndOfFile:SerialConnection.kt$com.geeksville.mesh.repository.usb.SerialConnection.kt</ID>
    <ID>NewLineAtEndOfFile:SerialConnectionListener.kt$com.geeksville.mesh.repository.usb.SerialConnectionListener.kt</ID>
    <ID>NewLineAtEndOfFile:SerialInterfaceFactory.kt$com.geeksville.mesh.repository.radio.SerialInterfaceFactory.kt</ID>
    <ID>NewLineAtEndOfFile:TCPInterfaceFactory.kt$com.geeksville.mesh.repository.radio.TCPInterfaceFactory.kt</ID>
    <ID>NewLineAtEndOfFile:UsbRepositoryModule.kt$com.geeksville.mesh.repository.usb.UsbRepositoryModule.kt</ID>
    <ID>NoBlankLineBeforeRbrace:DebugLogFile.kt$BinaryLogFile$ </ID>
    <ID>NoBlankLineBeforeRbrace:NopInterface.kt$NopInterface$ </ID>
    <ID>NoConsecutiveBlankLines:Constants.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DebugLogFile.kt$ </ID>
    <ID>NoEmptyClassBody:DebugLogFile.kt$BinaryLogFile${ }</ID>
    <ID>NoSemicolons:DateUtils.kt$DateUtils$;</ID>
    <ID>OptionalAbstractKeyword:SyncContinuation.kt$Continuation$abstract</ID>
    <ID>ParameterNaming:ContactSharing.kt$onSharedContactRequested</ID>
    <ID>ParameterNaming:Contacts.kt$onDeleteSelected</ID>
    <ID>ParameterNaming:Contacts.kt$onMuteSelected</ID>
    <ID>ParameterNaming:MessageList.kt$onUnreadChanged</ID>
    <ID>ParameterNaming:UsbDevices.kt$onDeviceSelected</ID>
    <ID>PreviewPublic:Channel.kt$ModemPresetInfoPreview</ID>
    <ID>PreviewPublic:EmptyStateContent.kt$EmptyStateContentPreview</ID>
    <ID>PreviewPublic:Reaction.kt$ReactionItemPreview</ID>
    <ID>PreviewPublic:Reaction.kt$ReactionRowPreview</ID>
    <ID>RethrowCaughtException:SyncContinuation.kt$Continuation$throw ex</ID>
    <ID>SwallowedException:BluetoothInterface.kt$BluetoothInterface$ex: CancellationException</ID>
    <ID>SwallowedException:Exceptions.kt$ex: Throwable</ID>
    <ID>SwallowedException:MeshService.kt$MeshService$ex: BLEException</ID>
    <ID>SwallowedException:MeshService.kt$MeshService$ex: CancellationException</ID>
    <ID>SwallowedException:NsdManager.kt$ex: IllegalArgumentException</ID>
    <ID>SwallowedException:SafeBluetooth.kt$SafeBluetooth$ex: DeadObjectException</ID>
    <ID>SwallowedException:SafeBluetooth.kt$SafeBluetooth$ex: NullPointerException</ID>
    <ID>SwallowedException:ServiceClient.kt$ServiceClient$ex: IllegalArgumentException</ID>
    <ID>SwallowedException:TCPInterface.kt$TCPInterface$ex: SocketTimeoutException</ID>
    <ID>TooGenericExceptionCaught:BTScanModel.kt$BTScanModel$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:BluetoothInterface.kt$BluetoothInterface$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:Exceptions.kt$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:MQTTRepository.kt$MQTTRepository$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:MeshService.kt$MeshService$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:MeshService.kt$MeshService.&lt;no name provided&gt;$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:MeshServiceStarter.kt$ServiceStarter$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:SafeBluetooth.kt$SafeBluetooth$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:SafeBluetooth.kt$SafeBluetooth$ex: NullPointerException</ID>
    <ID>TooGenericExceptionCaught:SyncContinuation.kt$Continuation$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:TCPInterface.kt$TCPInterface$ex: Throwable</ID>
    <ID>TooGenericExceptionThrown:MeshService.kt$MeshService$throw Exception("Can't set user without a NodeInfo")</ID>
    <ID>TooGenericExceptionThrown:MeshService.kt$MeshService.&lt;no name provided&gt;$throw Exception("Port numbers must be non-zero!")</ID>
    <ID>TooGenericExceptionThrown:ServiceClient.kt$ServiceClient$throw Exception("Haven't called connect")</ID>
    <ID>TooGenericExceptionThrown:ServiceClient.kt$ServiceClient$throw Exception("Service not bound")</ID>
    <ID>TooGenericExceptionThrown:SyncContinuation.kt$SyncContinuation$throw Exception("SyncContinuation timeout")</ID>
    <ID>TooGenericExceptionThrown:SyncContinuation.kt$SyncContinuation$throw Exception("This shouldn't happen")</ID>
    <ID>TooManyFunctions:BluetoothInterface.kt$BluetoothInterface : IRadioInterface</ID>
    <ID>TooManyFunctions:MeshService.kt$MeshService : Service</ID>
    <ID>TooManyFunctions:MeshService.kt$MeshService$&lt;no name provided&gt; : Stub</ID>
    <ID>TooManyFunctions:MessageViewModel.kt$MessageViewModel : ViewModel</ID>
    <ID>TooManyFunctions:RadioInterfaceService.kt$RadioInterfaceService</ID>
    <ID>TooManyFunctions:SafeBluetooth.kt$SafeBluetooth : Closeable</ID>
    <ID>TooManyFunctions:UIState.kt$UIViewModel : ViewModel</ID>
    <ID>TopLevelPropertyNaming:Constants.kt$const val prefix = "com.geeksville.mesh"</ID>
    <ID>UtilityClassWithPublicConstructor:NetworkRepositoryModule.kt$NetworkRepositoryModule</ID>
    <ID>ViewModelForwarding:Main.kt$VersionChecks(uIViewModel)</ID>
    <ID>Wrapping:Message.kt${ event -&gt; when (event) { is MessageScreenEvent.SendMessage -&gt; { viewModel.sendMessage(event.text, contactKey, event.replyingToPacketId) if (event.replyingToPacketId != null) replyingToPacketId = null messageInputState.clearText() } is MessageScreenEvent.SendReaction -&gt; viewModel.sendReaction(event.emoji, event.messageId, contactKey) is MessageScreenEvent.DeleteMessages -&gt; { viewModel.deleteMessages(event.ids) selectedMessageIds.value = emptySet() showDeleteDialog = false } is MessageScreenEvent.ClearUnreadCount -&gt; viewModel.clearUnreadCount(contactKey, event.lastReadMessageId) is MessageScreenEvent.NodeDetails -&gt; navigateToNodeDetails(event.node.num) is MessageScreenEvent.SetTitle -&gt; viewModel.setTitle(event.title) is MessageScreenEvent.NavigateToMessages -&gt; navigateToMessages(event.contactKey) is MessageScreenEvent.NavigateToNodeDetails -&gt; navigateToNodeDetails(event.nodeNum) MessageScreenEvent.NavigateBack -&gt; onNavigateBack() is MessageScreenEvent.CopyToClipboard -&gt; { clipboardManager.nativeClipboard.setPrimaryClip(ClipData.newPlainText(event.text, event.text)) selectedMessageIds.value = emptySet() } } }</ID>
  </CurrentIssues>
</SmellBaseline>
