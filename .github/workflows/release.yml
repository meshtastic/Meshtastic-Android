name: Make Release

on:
  workflow_dispatch: # Allows manual triggering
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0.0, v2.3.4-alpha.1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write # To create releases
  pull-requests: read # For changelog generation
  id-token: write # For OIDC token exchange with Google Play
  attestations: write # For build provenance

jobs:
  make-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_URL: ${{ steps.create_gh_release.outputs.upload_url }}
      CHANGELOG: ${{ steps.generate_changelog.outputs.changelog }}
      APP_VERSION_NAME: ${{ steps.get_version_name.outputs.APP_VERSION_NAME }}
      APP_VERSION_CODE: ${{ steps.calculate_version_code.outputs.versionCode }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for changelog generation
          submodules: 'recursive'

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'jetbrains'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          build-scan-publish: true
          build-scan-terms-of-use-url: 'https://gradle.com/terms-of-service'
          build-scan-terms-of-use-agree: 'yes'

      - name: Determine Version Name from Tag
        id: get_version_name
        run: echo "APP_VERSION_NAME=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      - name: Calculate Version Code
        id: calculate_version_code
        uses: ./.github/actions/calculate-version-code

      - name: Load secrets
        env:
          GSERVICES_BASE64: ${{ secrets.GSERVICES }}
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE }}
          KEYSTORE_FILENAME_SECRET: ${{ secrets.KEYSTORE_FILENAME }}
          KEYSTORE_PROPERTIES_SECRET: ${{ secrets.KEYSTORE_PROPERTIES }}
          DATADOG_APPLICATION_ID_SECRET: ${{ secrets.DATADOG_APPLICATION_ID }}
          DATADOG_CLIENT_TOKEN_SECRET: ${{ secrets.DATADOG_CLIENT_TOKEN }}
          GOOGLE_MAPS_API_KEY_SECRET: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        run: |
          echo "Writing google-services.json"
          echo "$GSERVICES_BASE64" | base64 --decode > ./app/google-services.json

          echo "Writing keystore file"
          echo "$KEYSTORE_BASE64" | base64 --decode > ./app/$KEYSTORE_FILENAME_SECRET

          echo "Writing keystore.properties"
          echo "$KEYSTORE_PROPERTIES_SECRET" > ./keystore.properties

          echo "Writing other secrets to secrets.properties"
          echo "datadogApplicationId=$DATADOG_APPLICATION_ID_SECRET" >> ./secrets.properties
          echo "datadogClientToken=$DATADOG_CLIENT_TOKEN_SECRET" >> ./secrets.properties
          echo "MAPS_API_KEY=$GOOGLE_MAPS_API_KEY_SECRET" >> ./secrets.properties

      - name: Generate Changelog
        id: generate_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: ".github/changelog-config.json"
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          ignorePreReleases: true
          failOnError: true
          fetchViaCommits: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Play Store Release Notes
        if: steps.generate_changelog.outputs.changelog != ''
        run: |
          mkdir -p play_store_release_notes/en-US
          echo "${{ steps.generate_changelog.outputs.changelog }}" > play_store_release_notes/en-US/default.txt
          echo "${{ steps.generate_changelog.outputs.changelog }}" > changelog.txt

      - name: Build Release Artifacts (AAB and APK)
        run: |
          ./gradlew :app:bundleGoogleRelease :app:assembleGoogleRelease :app:assembleFdroidRelease\
            --parallel --continue --scan
        env:
          VERSION_NAME: ${{ steps.get_version_name.outputs.APP_VERSION_NAME }}
          VERSION_CODE: ${{ steps.calculate_version_code.outputs.versionCode }}

      - name: Create version_info.txt
        run: |
          echo "versionNameBase=${{ steps.get_version_name.outputs.APP_VERSION_NAME }}" > ./version_info.txt
          echo "versionCode=${{ steps.calculate_version_code.outputs.versionCode }}" >> ./version_info.txt

      - name: Create GitHub Release
        id: create_gh_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.generate_changelog.outputs.changelog }}
          files: |
            app/build/outputs/bundle/googleRelease/app-google-release.aab
            app/build/outputs/apk/google/release/app-google-release.apk
            app/build/outputs/apk/fdroid/release/app-fdroid-release.apk
            ./version_info.txt
            ./changelog.txt
          draft: true
          prerelease: ${{ contains(github.ref_name, '-internal') || contains(github.ref_name, '-closed') || contains(github.ref_name, '-open') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            app/build/outputs/bundle/googleRelease/app-google-release.aab
            app/build/outputs/apk/google/release/app-google-release.apk
            app/build/outputs/apk/fdroid/release/app-fdroid-release.apk

      - name: Determine Play Store Track
        id: get_track
        run: |
          TAG_NAME="${{ github.ref_name }}"
          if [[ "$TAG_NAME" == *"-internal"* ]]; then
            echo "track=qa" >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" == *"-closed"* ]]; then
            echo "track=newalpha" >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" == *"-open"* ]]; then
            echo "track=beta" >> $GITHUB_OUTPUT
          else
            echo "track=production" >> $GITHUB_OUTPUT
          fi

      - name: Upload AAB to Google Play
        if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: r0adkll/upload-google-play@v1.0.19
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
          packageName: com.geeksville.mesh
          releaseFiles: app/build/outputs/bundle/googleRelease/app-google-release.aab
          track: ${{ steps.get_track.outputs.track }}
          status: 'draft'
          whatsNewDirectory: ./play_store_release_notes/en-US/
