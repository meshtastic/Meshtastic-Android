<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues>
    <ID>TooManyFunctions:ContactSharing.kt$com.geeksville.mesh.ui.ContactSharing.kt</ID>
    <ID>TooManyFunctions:NodeDetail.kt$com.geeksville.mesh.ui.NodeDetail.kt</ID>
  </ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ChainWrapping:Channel.kt$Channel$&amp;&amp;</ID>
    <ID>CommentSpacing:BLEException.kt$BLEConnectionClosing$/// Our interface is being shut down</ID>
    <ID>CommentSpacing:Constants.kt$/// a bool true means we expect this condition to continue until, false means device might come back</ID>
    <ID>CommentSpacing:ContextExtensions.kt$/// Utility function to hide the soft keyboard per stack overflow</ID>
    <ID>CommentSpacing:ContextExtensions.kt$/// show a toast</ID>
    <ID>CommentSpacing:Coroutines.kt$/// Wrap launch with an exception handler, FIXME, move into a utility lib</ID>
    <ID>CommentSpacing:DeferredExecution.kt$DeferredExecution$/// Queue some new work</ID>
    <ID>CommentSpacing:DeferredExecution.kt$DeferredExecution$/// run all work in the queue and clear it to be ready to accept new work</ID>
    <ID>CommentSpacing:Exceptions.kt$/// Convert any exceptions in this service call into a RemoteException that the client can</ID>
    <ID>CommentSpacing:Exceptions.kt$/// then handle</ID>
    <ID>CommentSpacing:Exceptions.kt$Exceptions$/// Set in Application.onCreate</ID>
    <ID>CommentSpacing:MockInterface.kt$MockInterface$/// Generate a fake node info entry</ID>
    <ID>CommentSpacing:MockInterface.kt$MockInterface$/// Generate a fake text message from a node</ID>
    <ID>CommentSpacing:MockInterface.kt$MockInterface$/// Send a fake ack packet back if the sender asked for want_ack</ID>
    <ID>ConstructorParameterNaming:MeshLog.kt$MeshLog$@ColumnInfo(name = "message") val raw_message: String</ID>
    <ID>ConstructorParameterNaming:MeshLog.kt$MeshLog$@ColumnInfo(name = "received_date") val received_date: Long</ID>
    <ID>ConstructorParameterNaming:MeshLog.kt$MeshLog$@ColumnInfo(name = "type") val message_type: String</ID>
    <ID>ConstructorParameterNaming:Packet.kt$ContactSettings$@PrimaryKey val contact_key: String</ID>
    <ID>ConstructorParameterNaming:Packet.kt$Packet$@ColumnInfo(name = "contact_key") val contact_key: String</ID>
    <ID>ConstructorParameterNaming:Packet.kt$Packet$@ColumnInfo(name = "port_num") val port_num: Int</ID>
    <ID>ConstructorParameterNaming:Packet.kt$Packet$@ColumnInfo(name = "received_time") val received_time: Long</ID>
    <ID>CyclomaticComplexMethod:MeshService.kt$MeshService$private fun handleReceivedData(packet: MeshPacket)</ID>
    <ID>CyclomaticComplexMethod:RadioConfigViewModel.kt$RadioConfigViewModel$private fun processPacketResponse(packet: MeshProtos.MeshPacket)</ID>
    <ID>EmptyCatchBlock:MeshLog.kt$MeshLog${ }</ID>
    <ID>EmptyClassBlock:DebugLogFile.kt$BinaryLogFile${ }</ID>
    <ID>EmptyFunctionBlock:NopInterface.kt$NopInterface${ }</ID>
    <ID>EmptyFunctionBlock:NsdManager.kt$&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:TrustAllX509TrustManager.kt$TrustAllX509TrustManager${}</ID>
    <ID>FinalNewline:AppPrefs.kt$com.geeksville.mesh.android.AppPrefs.kt</ID>
    <ID>FinalNewline:ApplicationModule.kt$com.geeksville.mesh.ApplicationModule.kt</ID>
    <ID>FinalNewline:BLEException.kt$com.geeksville.mesh.service.BLEException.kt</ID>
    <ID>FinalNewline:BluetoothInterfaceFactory.kt$com.geeksville.mesh.repository.radio.BluetoothInterfaceFactory.kt</ID>
    <ID>FinalNewline:BluetoothRepositoryModule.kt$com.geeksville.mesh.repository.bluetooth.BluetoothRepositoryModule.kt</ID>
    <ID>FinalNewline:BootCompleteReceiver.kt$com.geeksville.mesh.service.BootCompleteReceiver.kt</ID>
    <ID>FinalNewline:CoroutineDispatchers.kt$com.geeksville.mesh.CoroutineDispatchers.kt</ID>
    <ID>FinalNewline:Coroutines.kt$com.geeksville.mesh.concurrent.Coroutines.kt</ID>
    <ID>FinalNewline:DateUtils.kt$com.geeksville.mesh.android.DateUtils.kt</ID>
    <ID>FinalNewline:DebugLogFile.kt$com.geeksville.mesh.android.DebugLogFile.kt</ID>
    <ID>FinalNewline:DeferredExecution.kt$com.geeksville.mesh.concurrent.DeferredExecution.kt</ID>
    <ID>FinalNewline:DeviceVersion.kt$com.geeksville.mesh.model.DeviceVersion.kt</ID>
    <ID>FinalNewline:InterfaceId.kt$com.geeksville.mesh.repository.radio.InterfaceId.kt</ID>
    <ID>FinalNewline:InterfaceSpec.kt$com.geeksville.mesh.repository.radio.InterfaceSpec.kt</ID>
    <ID>FinalNewline:MockInterfaceFactory.kt$com.geeksville.mesh.repository.radio.MockInterfaceFactory.kt</ID>
    <ID>FinalNewline:NopInterface.kt$com.geeksville.mesh.repository.radio.NopInterface.kt</ID>
    <ID>FinalNewline:NopInterfaceFactory.kt$com.geeksville.mesh.repository.radio.NopInterfaceFactory.kt</ID>
    <ID>FinalNewline:ProbeTableProvider.kt$com.geeksville.mesh.repository.usb.ProbeTableProvider.kt</ID>
    <ID>FinalNewline:QuickChatActionRepository.kt$com.geeksville.mesh.database.QuickChatActionRepository.kt</ID>
    <ID>FinalNewline:RadioNotConnectedException.kt$com.geeksville.mesh.service.RadioNotConnectedException.kt</ID>
    <ID>FinalNewline:RadioRepositoryModule.kt$com.geeksville.mesh.repository.radio.RadioRepositoryModule.kt</ID>
    <ID>FinalNewline:RegularPreference.kt$com.geeksville.mesh.ui.common.components.RegularPreference.kt</ID>
    <ID>FinalNewline:SerialConnection.kt$com.geeksville.mesh.repository.usb.SerialConnection.kt</ID>
    <ID>FinalNewline:SerialConnectionListener.kt$com.geeksville.mesh.repository.usb.SerialConnectionListener.kt</ID>
    <ID>FinalNewline:SerialInterface.kt$com.geeksville.mesh.repository.radio.SerialInterface.kt</ID>
    <ID>FinalNewline:SerialInterfaceFactory.kt$com.geeksville.mesh.repository.radio.SerialInterfaceFactory.kt</ID>
    <ID>FinalNewline:TCPInterfaceFactory.kt$com.geeksville.mesh.repository.radio.TCPInterfaceFactory.kt</ID>
    <ID>FinalNewline:UsbBroadcastReceiver.kt$com.geeksville.mesh.repository.usb.UsbBroadcastReceiver.kt</ID>
    <ID>FinalNewline:UsbRepositoryModule.kt$com.geeksville.mesh.repository.usb.UsbRepositoryModule.kt</ID>
    <ID>ForbiddenComment:SafeBluetooth.kt$SafeBluetooth$// TODO: display some kind of UI about restarting BLE</ID>
    <ID>FunctionNaming:PacketDao.kt$PacketDao$@Query("DELETE FROM packet WHERE uuid=:uuid") suspend fun _delete(uuid: Long)</ID>
    <ID>FunctionNaming:QuickChatActionDao.kt$QuickChatActionDao$@Query("Delete from quick_chat where uuid=:uuid") fun _delete(uuid: Long)</ID>
    <ID>ImplicitDefaultLocale:NodeInfo.kt$NodeInfo$String.format("%d%%", batteryLevel)</ID>
    <ID>LargeClass:MeshService.kt$MeshService : ServiceLogging</ID>
    <ID>LongMethod:AmbientLightingConfigItemList.kt$@Composable fun AmbientLightingConfigItemList( ambientLightingConfig: ModuleConfigProtos.ModuleConfig.AmbientLightingConfig, enabled: Boolean, onSaveClicked: (ModuleConfigProtos.ModuleConfig.AmbientLightingConfig) -&gt; Unit, )</ID>
    <ID>LongMethod:AudioConfigItemList.kt$@Composable fun AudioConfigItemList( audioConfig: AudioConfig, enabled: Boolean, onSaveClicked: (AudioConfig) -&gt; Unit, )</ID>
    <ID>LongMethod:CannedMessageConfigItemList.kt$@Composable fun CannedMessageConfigItemList( messages: String, cannedMessageConfig: CannedMessageConfig, enabled: Boolean, onSaveClicked: (messages: String, config: CannedMessageConfig) -&gt; Unit, )</ID>
    <ID>LongMethod:DeviceConfigItemList.kt$@Composable fun DeviceConfigItemList( deviceConfig: DeviceConfig, enabled: Boolean, onSaveClicked: (DeviceConfig) -&gt; Unit, )</ID>
    <ID>LongMethod:DropDownPreference.kt$@Composable fun &lt;T&gt; DropDownPreference( title: String, enabled: Boolean, items: List&lt;Pair&lt;T, String&gt;&gt;, selectedItem: T, onItemSelected: (T) -&gt; Unit, modifier: Modifier = Modifier, summary: String? = null, )</ID>
    <ID>LongMethod:EditListPreference.kt$@Composable inline fun &lt;reified T&gt; EditListPreference( title: String, list: List&lt;T&gt;, maxCount: Int, enabled: Boolean, keyboardActions: KeyboardActions, crossinline onValuesChanged: (List&lt;T&gt;) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:ExternalNotificationConfigItemList.kt$@Composable fun ExternalNotificationConfigItemList( ringtone: String, extNotificationConfig: ExternalNotificationConfig, enabled: Boolean, onSaveClicked: (ringtone: String, config: ExternalNotificationConfig) -&gt; Unit, )</ID>
    <ID>LongMethod:MeshService.kt$MeshService$private fun handleReceivedData(packet: MeshPacket)</ID>
    <ID>LongMethod:RadioConfigViewModel.kt$RadioConfigViewModel$private fun processPacketResponse(packet: MeshProtos.MeshPacket)</ID>
    <ID>LongMethod:SerialConfigItemList.kt$@Composable fun SerialConfigItemList( serialConfig: SerialConfig, enabled: Boolean, onSaveClicked: (SerialConfig) -&gt; Unit, )</ID>
    <ID>LongMethod:StoreForwardConfigItemList.kt$@Composable fun StoreForwardConfigItemList( storeForwardConfig: StoreForwardConfig, enabled: Boolean, onSaveClicked: (StoreForwardConfig) -&gt; Unit, )</ID>
    <ID>LongMethod:TelemetryConfigItemList.kt$@Composable fun TelemetryConfigItemList( telemetryConfig: TelemetryConfig, enabled: Boolean, onSaveClicked: (TelemetryConfig) -&gt; Unit, )</ID>
    <ID>LongParameterList:NOAAWmsTileSource.kt$NOAAWmsTileSource$( aName: String, aBaseUrl: Array&lt;String&gt;, layername: String, version: String, time: String?, srs: String, style: String?, format: String, )</ID>
    <ID>LongParameterList:RadioInterfaceService.kt$RadioInterfaceService$( private val context: Application, private val dispatchers: CoroutineDispatchers, private val bluetoothRepository: BluetoothRepository, private val networkRepository: NetworkRepository, private val processLifecycle: Lifecycle, @RadioRepositoryQualifier private val prefs: SharedPreferences, private val interfaceFactory: InterfaceFactory, )</ID>
    <ID>MagicNumber:BatteryInfo.kt$100</ID>
    <ID>MagicNumber:BatteryInfo.kt$101</ID>
    <ID>MagicNumber:BatteryInfo.kt$14</ID>
    <ID>MagicNumber:BatteryInfo.kt$15</ID>
    <ID>MagicNumber:BatteryInfo.kt$34</ID>
    <ID>MagicNumber:BatteryInfo.kt$35</ID>
    <ID>MagicNumber:BatteryInfo.kt$4</ID>
    <ID>MagicNumber:BatteryInfo.kt$5</ID>
    <ID>MagicNumber:BatteryInfo.kt$79</ID>
    <ID>MagicNumber:BatteryInfo.kt$80</ID>
    <ID>MagicNumber:BluetoothInterface.kt$BluetoothInterface$1000</ID>
    <ID>MagicNumber:BluetoothInterface.kt$BluetoothInterface$500</ID>
    <ID>MagicNumber:BluetoothInterface.kt$BluetoothInterface$512</ID>
    <ID>MagicNumber:Channel.kt$0xff</ID>
    <ID>MagicNumber:ChannelOption.kt$.03125f</ID>
    <ID>MagicNumber:ChannelOption.kt$.0625f</ID>
    <ID>MagicNumber:ChannelOption.kt$.203125f</ID>
    <ID>MagicNumber:ChannelOption.kt$.40625f</ID>
    <ID>MagicNumber:ChannelOption.kt$.8125f</ID>
    <ID>MagicNumber:ChannelOption.kt$1.6250f</ID>
    <ID>MagicNumber:ChannelOption.kt$1000f</ID>
    <ID>MagicNumber:ChannelOption.kt$1600</ID>
    <ID>MagicNumber:ChannelOption.kt$200</ID>
    <ID>MagicNumber:ChannelOption.kt$3.25f</ID>
    <ID>MagicNumber:ChannelOption.kt$31</ID>
    <ID>MagicNumber:ChannelOption.kt$400</ID>
    <ID>MagicNumber:ChannelOption.kt$5</ID>
    <ID>MagicNumber:ChannelOption.kt$62</ID>
    <ID>MagicNumber:ChannelOption.kt$800</ID>
    <ID>MagicNumber:ChannelOption.kt$ChannelOption.LONG_FAST$.250f</ID>
    <ID>MagicNumber:ChannelOption.kt$ChannelOption.LONG_MODERATE$.125f</ID>
    <ID>MagicNumber:ChannelOption.kt$ChannelOption.LONG_SLOW$.125f</ID>
    <ID>MagicNumber:ChannelOption.kt$ChannelOption.MEDIUM_FAST$.250f</ID>
    <ID>MagicNumber:ChannelOption.kt$ChannelOption.MEDIUM_SLOW$.250f</ID>
    <ID>MagicNumber:ChannelOption.kt$ChannelOption.SHORT_FAST$.250f</ID>
    <ID>MagicNumber:ChannelOption.kt$ChannelOption.SHORT_SLOW$.250f</ID>
    <ID>MagicNumber:ChannelOption.kt$ChannelOption.VERY_LONG_SLOW$.0625f</ID>
    <ID>MagicNumber:ChannelSet.kt$40</ID>
    <ID>MagicNumber:ChannelSet.kt$960</ID>
    <ID>MagicNumber:Contacts.kt$7</ID>
    <ID>MagicNumber:Contacts.kt$8</ID>
    <ID>MagicNumber:DataPacket.kt$DataPacket.CREATOR$16</ID>
    <ID>MagicNumber:Debug.kt$3</ID>
    <ID>MagicNumber:DeviceVersion.kt$DeviceVersion$100</ID>
    <ID>MagicNumber:DeviceVersion.kt$DeviceVersion$10000</ID>
    <ID>MagicNumber:DownloadButton.kt$1.25f</ID>
    <ID>MagicNumber:EditChannelDialog.kt$16</ID>
    <ID>MagicNumber:EditChannelDialog.kt$32</ID>
    <ID>MagicNumber:EditIPv4Preference.kt$0xff</ID>
    <ID>MagicNumber:EditIPv4Preference.kt$16</ID>
    <ID>MagicNumber:EditIPv4Preference.kt$24</ID>
    <ID>MagicNumber:EditIPv4Preference.kt$8</ID>
    <ID>MagicNumber:EditListPreference.kt$12</ID>
    <ID>MagicNumber:EditListPreference.kt$12345</ID>
    <ID>MagicNumber:EditListPreference.kt$67890</ID>
    <ID>MagicNumber:Extensions.kt$1000</ID>
    <ID>MagicNumber:Extensions.kt$1440000</ID>
    <ID>MagicNumber:Extensions.kt$24</ID>
    <ID>MagicNumber:Extensions.kt$2880</ID>
    <ID>MagicNumber:Extensions.kt$60</ID>
    <ID>MagicNumber:LazyColumnDragAndDropDemo.kt$50</ID>
    <ID>MagicNumber:LocationRepository.kt$LocationRepository$1000L</ID>
    <ID>MagicNumber:LocationRepository.kt$LocationRepository$30</ID>
    <ID>MagicNumber:LocationRepository.kt$LocationRepository$31</ID>
    <ID>MagicNumber:LocationUtils.kt$1e-7</ID>
    <ID>MagicNumber:LocationUtils.kt$360</ID>
    <ID>MagicNumber:MQTTRepository.kt$MQTTRepository$512</ID>
    <ID>MagicNumber:MapView.kt$0.5f</ID>
    <ID>MagicNumber:MapView.kt$1.3</ID>
    <ID>MagicNumber:MapView.kt$1024.0</ID>
    <ID>MagicNumber:MapView.kt$128205</ID>
    <ID>MagicNumber:MapView.kt$12F</ID>
    <ID>MagicNumber:MapView.kt$&lt;no name provided&gt;$1e7</ID>
    <ID>MagicNumber:MapViewExtensions.kt$1e-5</ID>
    <ID>MagicNumber:MapViewExtensions.kt$1e-7</ID>
    <ID>MagicNumber:MapViewExtensions.kt$3.0f</ID>
    <ID>MagicNumber:MapViewExtensions.kt$40f</ID>
    <ID>MagicNumber:MapViewExtensions.kt$60f</ID>
    <ID>MagicNumber:MapViewExtensions.kt$80f</ID>
    <ID>MagicNumber:MarkerWithLabel.kt$MarkerWithLabel$3</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$0xffffffff</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$100</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$1000</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$1000.0</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$1000L</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$16</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$30</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$32</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$60000</ID>
    <ID>MagicNumber:MeshService.kt$MeshService$8</ID>
    <ID>MagicNumber:MetricsViewModel.kt$MetricsViewModel$1000L</ID>
    <ID>MagicNumber:MetricsViewModel.kt$MetricsViewModel$1e-5</ID>
    <ID>MagicNumber:MetricsViewModel.kt$MetricsViewModel$1e-7</ID>
    <ID>MagicNumber:NOAAWmsTileSource.kt$NOAAWmsTileSource$180</ID>
    <ID>MagicNumber:NOAAWmsTileSource.kt$NOAAWmsTileSource$256</ID>
    <ID>MagicNumber:NOAAWmsTileSource.kt$NOAAWmsTileSource$360.0</ID>
    <ID>MagicNumber:NOAAWmsTileSource.kt$NOAAWmsTileSource$4</ID>
    <ID>MagicNumber:NOAAWmsTileSource.kt$NOAAWmsTileSource$5</ID>
    <ID>MagicNumber:NodeInfo.kt$DeviceMetrics.Companion$1000</ID>
    <ID>MagicNumber:NodeInfo.kt$EnvironmentMetrics.Companion$1000</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$0.114</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$0.299</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$0.587</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$0x0000FF</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$0x00FF00</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$0xFF0000</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$1000</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$1000.0</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$16</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$1609</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$1609.34</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$255</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$3.281</ID>
    <ID>MagicNumber:NodeInfo.kt$NodeInfo$8</ID>
    <ID>MagicNumber:NodeInfo.kt$Position$180</ID>
    <ID>MagicNumber:NodeInfo.kt$Position$90</ID>
    <ID>MagicNumber:NodeInfo.kt$Position$90.0</ID>
    <ID>MagicNumber:NodeInfo.kt$Position.Companion$1000</ID>
    <ID>MagicNumber:NodeInfo.kt$Position.Companion$1e-7</ID>
    <ID>MagicNumber:NodeInfo.kt$Position.Companion$1e7</ID>
    <ID>MagicNumber:PacketRepository.kt$PacketRepository$500</ID>
    <ID>MagicNumber:PacketResponseStateDialog.kt$100</ID>
    <ID>MagicNumber:ProbeTableProvider.kt$ProbeTableProvider$21972</ID>
    <ID>MagicNumber:ProbeTableProvider.kt$ProbeTableProvider$32809</ID>
    <ID>MagicNumber:ProbeTableProvider.kt$ProbeTableProvider$6790</ID>
    <ID>MagicNumber:ProbeTableProvider.kt$ProbeTableProvider$9114</ID>
    <ID>MagicNumber:SafeBluetooth.kt$SafeBluetooth$10</ID>
    <ID>MagicNumber:SafeBluetooth.kt$SafeBluetooth$100</ID>
    <ID>MagicNumber:SafeBluetooth.kt$SafeBluetooth$1000</ID>
    <ID>MagicNumber:SafeBluetooth.kt$SafeBluetooth$2500</ID>
    <ID>MagicNumber:SafeBluetooth.kt$SafeBluetooth.&lt;no name provided&gt;$2500</ID>
    <ID>MagicNumber:SerialConnectionImpl.kt$SerialConnectionImpl$115200</ID>
    <ID>MagicNumber:SerialConnectionImpl.kt$SerialConnectionImpl$200</ID>
    <ID>MagicNumber:ServiceClient.kt$ServiceClient$500</ID>
    <ID>MagicNumber:StreamInterface.kt$StreamInterface$0xff</ID>
    <ID>MagicNumber:StreamInterface.kt$StreamInterface$3</ID>
    <ID>MagicNumber:StreamInterface.kt$StreamInterface$4</ID>
    <ID>MagicNumber:StreamInterface.kt$StreamInterface$8</ID>
    <ID>MagicNumber:TCPInterface.kt$TCPInterface$1000</ID>
    <ID>MagicNumber:TCPInterface.kt$TCPInterface$180</ID>
    <ID>MagicNumber:TCPInterface.kt$TCPInterface$500</ID>
    <ID>MagicNumber:UIState.kt$4</ID>
    <ID>MatchingDeclarationName:AnalyticsClient.kt$AnalyticsProvider</ID>
    <ID>MatchingDeclarationName:DistanceExtensions.kt$DistanceUnit</ID>
    <ID>MatchingDeclarationName:LocationUtils.kt$GPSFormat</ID>
    <ID>MatchingDeclarationName:MeshServiceStarter.kt$ServiceStarter : Worker</ID>
    <ID>MatchingDeclarationName:SortOption.kt$NodeSortOption</ID>
    <ID>MaxLineLength:AppPrefs.kt$FloatPref$fun get(thisRef: AppPrefs, prop: KProperty&lt;Float&gt;): Float</ID>
    <ID>MaxLineLength:AppPrefs.kt$StringPref$fun get(thisRef: AppPrefs, prop: KProperty&lt;String&gt;): String</ID>
    <ID>MaxLineLength:BluetoothInterface.kt$/* Info for the esp32 device side code. See that source for the 'gold' standard docs on this interface. MeshBluetoothService UUID 6ba1b218-15a8-461f-9fa8-5dcae273eafd FIXME - notify vs indication for fromradio output. Using notify for now, not sure if that is best FIXME - in the esp32 mesh management code, occasionally mirror the current net db to flash, so that if we reboot we still have a good guess of users who are out there. FIXME - make sure this protocol is guaranteed robust and won't drop packets "According to the BLE specification the notification length can be max ATT_MTU - 3. The 3 bytes subtracted is the 3-byte header(OP-code (operation, 1 byte) and the attribute handle (2 bytes)). In BLE 4.1 the ATT_MTU is 23 bytes (20 bytes for payload), but in BLE 4.2 the ATT_MTU can be negotiated up to 247 bytes." MAXPACKET is 256? look into what the lora lib uses. FIXME Characteristics: UUID properties description 8ba2bcc2-ee02-4a55-a531-c525c5e454d5 read fromradio - contains a newly received packet destined towards the phone (up to MAXPACKET bytes? per packet). After reading the esp32 will put the next packet in this mailbox. If the FIFO is empty it will put an empty packet in this mailbox. f75c76d2-129e-4dad-a1dd-7866124401e7 write toradio - write ToRadio protobufs to this charstic to send them (up to MAXPACKET len) ed9da18c-a800-4f66-a670-aa7547e34453 read|notify|write fromnum - the current packet # in the message waiting inside fromradio, if the phone sees this notify it should read messages until it catches up with this number. The phone can write to this register to go backwards up to FIXME packets, to handle the rare case of a fromradio packet was dropped after the esp32 callback was called, but before it arrives at the phone. If the phone writes to this register the esp32 will discard older packets and put the next packet &gt;= fromnum in fromradio. When the esp32 advances fromnum, it will delay doing the notify by 100ms, in the hopes that the notify will never actally need to be sent if the phone is already pulling from fromradio. Note: that if the phone ever sees this number decrease, it means the esp32 has rebooted. Re: queue management Not all messages are kept in the fromradio queue (filtered based on SubPacket): * only the most recent Position and User messages for a particular node are kept * all Data SubPackets are kept * No WantNodeNum / DenyNodeNum messages are kept A variable keepAllPackets, if set to true will suppress this behavior and instead keep everything for forwarding to the phone (for debugging) */</ID>
    <ID>MaxLineLength:BluetoothState.kt$BluetoothState$"BluetoothState(hasPermissions=$hasPermissions, enabled=$enabled, bondedDevices=${bondedDevices.map { it.anonymize }})"</ID>
    <ID>MaxLineLength:Channel.kt$Channel$// We have a new style 'empty' channel name. Use the same logic from the device to convert that to a human readable name</ID>
    <ID>MaxLineLength:DataPacket.kt$DataPacket$val dataType: Int</ID>
    <ID>MaxLineLength:LoRaConfigItemList.kt$value = if (isFocused || loraInput.overrideFrequency != 0f) loraInput.overrideFrequency else primaryChannel.radioFreq</ID>
    <ID>MaxLineLength:LocationRepository.kt$LocationRepository$info("Starting location updates with $providerList intervalMs=${intervalMs}ms and minDistanceM=${minDistanceM}m")</ID>
    <ID>MaxLineLength:MQTTRepository.kt$MQTTRepository.Companion$*</ID>
    <ID>MaxLineLength:ServiceClient.kt$ServiceClient$// Some phones seem to ahve a race where if you unbind and quickly rebind bindService returns false. Try</ID>
    <ID>MaxLineLength:ServiceClient.kt$ServiceClient.&lt;no name provided&gt;$// If we start to close a service, it seems that there is a possibility a onServiceConnected event is the queue</ID>
    <ID>MaxLineLength:StreamInterface.kt$StreamInterface$*</ID>
    <ID>MaxLineLength:StreamInterface.kt$StreamInterface$* An interface that assumes we are talking to a meshtastic device over some sort of stream connection (serial or TCP probably)</ID>
    <ID>MaxLineLength:StreamInterface.kt$StreamInterface$// Note: we have to check if ptr +1 is equal to packet length (for example, for a 1 byte packetlen, this code will be run with ptr of4</ID>
    <ID>MaxLineLength:StreamInterface.kt$StreamInterface$deliverPacket()</ID>
    <ID>MaxLineLength:StreamInterface.kt$StreamInterface$lostSync()</ID>
    <ID>MaxLineLength:StreamInterface.kt$StreamInterface$service.onDisconnect(isPermanent = true)</ID>
    <ID>MayBeConst:AppPrefs.kt$AppPrefs.Companion$private val baseName = "appPrefs_"</ID>
    <ID>MultiLineIfElse:Channel.kt$Channel$"Custom"</ID>
    <ID>MultiLineIfElse:Channel.kt$Channel$when (loraConfig.modemPreset) { ModemPreset.SHORT_TURBO -&gt; "ShortTurbo" ModemPreset.SHORT_FAST -&gt; "ShortFast" ModemPreset.SHORT_SLOW -&gt; "ShortSlow" ModemPreset.MEDIUM_FAST -&gt; "MediumFast" ModemPreset.MEDIUM_SLOW -&gt; "MediumSlow" ModemPreset.LONG_FAST -&gt; "LongFast" ModemPreset.LONG_SLOW -&gt; "LongSlow" ModemPreset.LONG_MODERATE -&gt; "LongMod" ModemPreset.VERY_LONG_SLOW -&gt; "VLongSlow" else -&gt; "Invalid" }</ID>
    <ID>MultiLineIfElse:EditListPreference.kt$EditBase64Preference( title = "${index + 1}/$maxCount", value = value, enabled = enabled, keyboardActions = keyboardActions, onValueChange = { listState[index] = it as T onValuesChanged(listState) }, modifier = modifier.fillMaxWidth(), trailingIcon = trailingIcon, )</ID>
    <ID>MultiLineIfElse:EditListPreference.kt$EditTextPreference( title = "${index + 1}/$maxCount", value = value, enabled = enabled, keyboardActions = keyboardActions, onValueChanged = { listState[index] = it as T onValuesChanged(listState) }, modifier = modifier.fillMaxWidth(), trailingIcon = trailingIcon, )</ID>
    <ID>MultiLineIfElse:EditTextPreference.kt$it.toDoubleOrNull()?.let { double -&gt; valueState = it onValueChanged(double) }</ID>
    <ID>MultiLineIfElse:EditTextPreference.kt$it.toFloatOrNull()?.let { float -&gt; valueState = it onValueChanged(float) }</ID>
    <ID>MultiLineIfElse:EditTextPreference.kt$it.toUIntOrNull()?.toInt()?.let { int -&gt; valueState = it onValueChanged(int) }</ID>
    <ID>MultiLineIfElse:EditTextPreference.kt$onValueChanged(it)</ID>
    <ID>MultiLineIfElse:EditTextPreference.kt$valueState = it</ID>
    <ID>MultiLineIfElse:Exceptions.kt$Exceptions.errormsg("ignoring exception", ex)</ID>
    <ID>NestedBlockDepth:LanguageUtils.kt$LanguageUtils$fun getLanguageTags(context: Context): Map&lt;String, String&gt;</ID>
    <ID>NestedBlockDepth:MeshService.kt$MeshService$private fun handleReceivedAdmin(fromNodeNum: Int, a: AdminProtos.AdminMessage)</ID>
    <ID>NestedBlockDepth:MeshService.kt$MeshService$private fun handleReceivedData(packet: MeshPacket)</ID>
    <ID>NestedBlockDepth:RadioConfigViewModel.kt$RadioConfigViewModel$private fun processPacketResponse(packet: MeshProtos.MeshPacket)</ID>
    <ID>NewLineAtEndOfFile:AppPrefs.kt$com.geeksville.mesh.android.AppPrefs.kt</ID>
    <ID>NewLineAtEndOfFile:ApplicationModule.kt$com.geeksville.mesh.ApplicationModule.kt</ID>
    <ID>NewLineAtEndOfFile:BLEException.kt$com.geeksville.mesh.service.BLEException.kt</ID>
    <ID>NewLineAtEndOfFile:BluetoothInterfaceFactory.kt$com.geeksville.mesh.repository.radio.BluetoothInterfaceFactory.kt</ID>
    <ID>NewLineAtEndOfFile:BluetoothRepositoryModule.kt$com.geeksville.mesh.repository.bluetooth.BluetoothRepositoryModule.kt</ID>
    <ID>NewLineAtEndOfFile:BootCompleteReceiver.kt$com.geeksville.mesh.service.BootCompleteReceiver.kt</ID>
    <ID>NewLineAtEndOfFile:CoroutineDispatchers.kt$com.geeksville.mesh.CoroutineDispatchers.kt</ID>
    <ID>NewLineAtEndOfFile:Coroutines.kt$com.geeksville.mesh.concurrent.Coroutines.kt</ID>
    <ID>NewLineAtEndOfFile:DateUtils.kt$com.geeksville.mesh.android.DateUtils.kt</ID>
    <ID>NewLineAtEndOfFile:DebugLogFile.kt$com.geeksville.mesh.android.DebugLogFile.kt</ID>
    <ID>NewLineAtEndOfFile:DeferredExecution.kt$com.geeksville.mesh.concurrent.DeferredExecution.kt</ID>
    <ID>NewLineAtEndOfFile:DeviceVersion.kt$com.geeksville.mesh.model.DeviceVersion.kt</ID>
    <ID>NewLineAtEndOfFile:InterfaceId.kt$com.geeksville.mesh.repository.radio.InterfaceId.kt</ID>
    <ID>NewLineAtEndOfFile:InterfaceSpec.kt$com.geeksville.mesh.repository.radio.InterfaceSpec.kt</ID>
    <ID>NewLineAtEndOfFile:MockInterfaceFactory.kt$com.geeksville.mesh.repository.radio.MockInterfaceFactory.kt</ID>
    <ID>NewLineAtEndOfFile:NopInterface.kt$com.geeksville.mesh.repository.radio.NopInterface.kt</ID>
    <ID>NewLineAtEndOfFile:NopInterfaceFactory.kt$com.geeksville.mesh.repository.radio.NopInterfaceFactory.kt</ID>
    <ID>NewLineAtEndOfFile:ProbeTableProvider.kt$com.geeksville.mesh.repository.usb.ProbeTableProvider.kt</ID>
    <ID>NewLineAtEndOfFile:QuickChatActionRepository.kt$com.geeksville.mesh.database.QuickChatActionRepository.kt</ID>
    <ID>NewLineAtEndOfFile:RadioNotConnectedException.kt$com.geeksville.mesh.service.RadioNotConnectedException.kt</ID>
    <ID>NewLineAtEndOfFile:RadioRepositoryModule.kt$com.geeksville.mesh.repository.radio.RadioRepositoryModule.kt</ID>
    <ID>NewLineAtEndOfFile:RegularPreference.kt$com.geeksville.mesh.ui.common.components.RegularPreference.kt</ID>
    <ID>NewLineAtEndOfFile:SerialConnection.kt$com.geeksville.mesh.repository.usb.SerialConnection.kt</ID>
    <ID>NewLineAtEndOfFile:SerialConnectionListener.kt$com.geeksville.mesh.repository.usb.SerialConnectionListener.kt</ID>
    <ID>NewLineAtEndOfFile:SerialInterface.kt$com.geeksville.mesh.repository.radio.SerialInterface.kt</ID>
    <ID>NewLineAtEndOfFile:SerialInterfaceFactory.kt$com.geeksville.mesh.repository.radio.SerialInterfaceFactory.kt</ID>
    <ID>NewLineAtEndOfFile:TCPInterfaceFactory.kt$com.geeksville.mesh.repository.radio.TCPInterfaceFactory.kt</ID>
    <ID>NewLineAtEndOfFile:UsbBroadcastReceiver.kt$com.geeksville.mesh.repository.usb.UsbBroadcastReceiver.kt</ID>
    <ID>NewLineAtEndOfFile:UsbRepositoryModule.kt$com.geeksville.mesh.repository.usb.UsbRepositoryModule.kt</ID>
    <ID>NoBlankLineBeforeRbrace:DebugLogFile.kt$BinaryLogFile$ </ID>
    <ID>NoBlankLineBeforeRbrace:NopInterface.kt$NopInterface$ </ID>
    <ID>NoConsecutiveBlankLines:AppPrefs.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BootCompleteReceiver.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Constants.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DebugLogFile.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DeferredExecution.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Exceptions.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IRadioInterface.kt$ </ID>
    <ID>NoEmptyClassBody:DebugLogFile.kt$BinaryLogFile${ }</ID>
    <ID>NoSemicolons:DateUtils.kt$DateUtils$;</ID>
    <ID>NoWildcardImports:MockInterface.kt$import com.geeksville.mesh.*</ID>
    <ID>NoWildcardImports:UsbRepository.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>OptionalAbstractKeyword:SyncContinuation.kt$Continuation$abstract</ID>
    <ID>ParameterListWrapping:AppPrefs.kt$FloatPref$(thisRef: AppPrefs, prop: KProperty&lt;Float&gt;)</ID>
    <ID>ParameterListWrapping:AppPrefs.kt$StringPref$(thisRef: AppPrefs, prop: KProperty&lt;String&gt;)</ID>
    <ID>RethrowCaughtException:SyncContinuation.kt$Continuation$throw ex</ID>
    <ID>ReturnCount:RadioConfigViewModel.kt$RadioConfigViewModel$private fun processPacketResponse(packet: MeshProtos.MeshPacket)</ID>
    <ID>SpacingAroundCurly:AppPrefs.kt$FloatPref$}</ID>
    <ID>SpacingAroundKeyword:AppPrefs.kt$AppPrefs$if</ID>
    <ID>SpacingAroundKeyword:Exceptions.kt$if</ID>
    <ID>SpacingAroundKeyword:Exceptions.kt$when</ID>
    <ID>SpacingAroundRangeOperator:BatteryInfo.kt$..</ID>
    <ID>SwallowedException:BluetoothInterface.kt$BluetoothInterface$ex: CancellationException</ID>
    <ID>SwallowedException:ChannelSet.kt$ex: Throwable</ID>
    <ID>SwallowedException:DeviceVersion.kt$DeviceVersion$e: Exception</ID>
    <ID>SwallowedException:Exceptions.kt$ex: Throwable</ID>
    <ID>SwallowedException:MeshLog.kt$MeshLog$e: IOException</ID>
    <ID>SwallowedException:MeshService.kt$MeshService$e: Exception</ID>
    <ID>SwallowedException:MeshService.kt$MeshService$e: TimeoutException</ID>
    <ID>SwallowedException:MeshService.kt$MeshService$ex: BLEException</ID>
    <ID>SwallowedException:MeshService.kt$MeshService$ex: CancellationException</ID>
    <ID>SwallowedException:NsdManager.kt$ex: IllegalArgumentException</ID>
    <ID>SwallowedException:SafeBluetooth.kt$SafeBluetooth$ex: DeadObjectException</ID>
    <ID>SwallowedException:SafeBluetooth.kt$SafeBluetooth$ex: NullPointerException</ID>
    <ID>SwallowedException:ServiceClient.kt$ServiceClient$ex: IllegalArgumentException</ID>
    <ID>SwallowedException:TCPInterface.kt$TCPInterface$ex: SocketTimeoutException</ID>
    <ID>TooGenericExceptionCaught:BTScanModel.kt$BTScanModel$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:BluetoothInterface.kt$BluetoothInterface$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ChannelSet.kt$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:DeviceVersion.kt$DeviceVersion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Exceptions.kt$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:LanguageUtils.kt$LanguageUtils$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LocationRepository.kt$LocationRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MQTTRepository.kt$MQTTRepository$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:MainActivity.kt$MainActivity$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:MapView.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:MapViewModel.kt$MapViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MeshService.kt$MeshService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MeshService.kt$MeshService$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:MeshService.kt$MeshService.&lt;no name provided&gt;$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:MeshServiceStarter.kt$ServiceStarter$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:RadioConfigViewModel.kt$RadioConfigViewModel$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:SafeBluetooth.kt$SafeBluetooth$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:SafeBluetooth.kt$SafeBluetooth$ex: NullPointerException</ID>
    <ID>TooGenericExceptionCaught:SqlTileWriterExt.kt$SqlTileWriterExt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncContinuation.kt$Continuation$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:TCPInterface.kt$TCPInterface$ex: Throwable</ID>
    <ID>TooGenericExceptionThrown:DeviceVersion.kt$DeviceVersion$throw Exception("Can't parse version $s")</ID>
    <ID>TooGenericExceptionThrown:MeshService.kt$MeshService$throw Exception("Can't set user without a NodeInfo")</ID>
    <ID>TooGenericExceptionThrown:MeshService.kt$MeshService.&lt;no name provided&gt;$throw Exception("Port numbers must be non-zero!")</ID>
    <ID>TooGenericExceptionThrown:ServiceClient.kt$ServiceClient$throw Exception("Haven't called connect")</ID>
    <ID>TooGenericExceptionThrown:ServiceClient.kt$ServiceClient$throw Exception("Service not bound")</ID>
    <ID>TooGenericExceptionThrown:SyncContinuation.kt$SyncContinuation$throw Exception("SyncContinuation timeout")</ID>
    <ID>TooGenericExceptionThrown:SyncContinuation.kt$SyncContinuation$throw Exception("This shouldn't happen")</ID>
    <ID>TooManyFunctions:AppPrefs.kt$AppPrefs</ID>
    <ID>TooManyFunctions:BluetoothInterface.kt$BluetoothInterface : IRadioInterfaceLogging</ID>
    <ID>TooManyFunctions:MainActivity.kt$MainActivity : AppCompatActivityLogging</ID>
    <ID>TooManyFunctions:MeshService.kt$MeshService : ServiceLogging</ID>
    <ID>TooManyFunctions:MeshService.kt$MeshService$&lt;no name provided&gt; : Stub</ID>
    <ID>TooManyFunctions:NodeDetail.kt$com.geeksville.mesh.ui.node.NodeDetail.kt</ID>
    <ID>TooManyFunctions:PacketDao.kt$PacketDao</ID>
    <ID>TooManyFunctions:PacketRepository.kt$PacketRepository</ID>
    <ID>TooManyFunctions:RadioConfigRepository.kt$RadioConfigRepository</ID>
    <ID>TooManyFunctions:RadioConfigViewModel.kt$RadioConfigViewModel : ViewModelLogging</ID>
    <ID>TooManyFunctions:RadioInterfaceService.kt$RadioInterfaceService : Logging</ID>
    <ID>TooManyFunctions:SafeBluetooth.kt$SafeBluetooth : LoggingCloseable</ID>
    <ID>TooManyFunctions:UIState.kt$UIViewModel : ViewModelLogging</ID>
    <ID>TopLevelPropertyNaming:Constants.kt$const val prefix = "com.geeksville.mesh"</ID>
    <ID>UnusedPrivateMember:NOAAWmsTileSource.kt$NOAAWmsTileSource$private fun tile2lat(y: Int, z: Int): Double</ID>
    <ID>UnusedPrivateMember:NOAAWmsTileSource.kt$NOAAWmsTileSource$private fun tile2lon(x: Int, z: Int): Double</ID>
    <ID>UtilityClassWithPublicConstructor:CustomTileSource.kt$CustomTileSource</ID>
    <ID>UtilityClassWithPublicConstructor:NetworkRepositoryModule.kt$NetworkRepositoryModule</ID>
    <ID>WildcardImport:MockInterface.kt$import com.geeksville.mesh.*</ID>
    <ID>WildcardImport:UsbRepository.kt$import kotlinx.coroutines.flow.*</ID>
  </CurrentIssues>
</SmellBaseline>
